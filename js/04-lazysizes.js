// Проблема в том что вся эта красота не сработает к примеру на браузере Сафари, если мы хотим чтобы эта ленивая
// загрузка работала везде, нам необходимо использовать библиотеку. Об этом ниже:

/*
 * Библиотека lazysizes
 * - feature detection
 */


// Возьмем абсолютно идентичную разметку как в предыдущем примере и удалим из неё атрибут loading = 'lazy'

// Библиотека lazysizes - это уже готовое решение. Подключим её через cdn и вставим её в нашу разметку перед
// скриптом JS. После чего она будет подключться в наш браузер при загрузке страницы. Идём в каждую картинку и
// в разметке для img добавляем класс lazyload, и меняем наш атрибут src на data-src. После чего наша ленивая
// загрузка начинает работать. Плюс этой библиотеки в том что она работает на всех браузерах. Это не нативная
// загрузка, а внешний чей то код, который мы подключаем себе и у нас работает ленивая загрузка на всех браузерах.
// Ну а если после этого мы хотим чтобы ещё и какая то доп анимация работала, то дописываем её в наш код как в предыдущем
// примере с добавлением класса 'appear'

// Нативное решение которое встроено в браузер, оно гарантрованно будет работать лучше чем люба библиотека

// Отсюда и проблема в том, что если сам браузер поддерживает решение, то нам не стоит подключать библиотеку, т.к.
// как сказано было выше нативное решение гарантированно будет работать лучше, соответственно нам необходимо подключать
// библиотеку только в том случае, если браузер в котором открывается веб страница не поддерживает решение(в нашем случае
// нативную загрузку, т.е. ленивую загрузку). Для этого нам необходимо использовать featurt detection (или определение
// возможностей браузера), в таком случае мы удаляем нашу библиотеку из разметки и подключаем её только в том месте где это
// необходимо.


// Условие говорит: если на прототипе браузера есть 'loading', то браузер поддерживает ленивую загрузку, если нет
// то подключаем скрипт для ленивой загрузки:
// if ('loading' in HTMLImageElement.prototype) {
//   console.log('Браузер поддерживает lazyload');

// const lazyImages = document.querySelectorAll('img[data-src]');

//   lazyImages.forEach(image => {
//     image.src = img.dataset.src;
//   }); // т.е. в этой части используются только возможности самого браузера (этот код можем вынести в функцию и вызывать если
//   // срабатывает условие), см ниже "функция 1"
// } else {
//   console.log('Браузер НЕ поддерживает lazyload');

  // Если браузер не использует нативную ленивую загрузку, то возьмем скрипт(разметку) подключения библиотеки из документации
  // и напишем шаблон разметки которая будет добавляться когда будет срабатывать условие(это можно запихнуть в функцию и её
  // вызывать если срабатывает условие, но сделаем это позже см. ниже "функция 2"):
//   const script = document.createElement('script');
//   script.src =
//     'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.2.2/lazysizes.min.js';
//   script.integrity =
//     'sha512-TmDwFLhg3UA4ZG0Eb4MIyT1O1Mb+Oww5kFG0uHqXsdbyZz9DcvYQhKpGgNkamAI6h2lGGZq2X8ftOJvF/XjTUg==';
//   script.crossOrigin = 'anonymous';

//   document.body.appendChild(script);
// }

// Перепишем начисто, при этом вынесем условия прописанные в if else в отдельные функции:

// проверка наличия у браузера нативной загрузки (ленивой загрузки). Эта часть называется featurt detection (или определение
// возможностей браузера). Если есть делаем нативно, если нет добавляем что требуется:
if ('loading' in HTMLImageElement.prototype) {
  console.log('Браузер поддерживает lazyload');
  addSrcAttrToLazyImages();
} else {
  console.log('Браузер НЕ поддерживает lazyload');
  addLazySizesScript();
}

const lazyImages = document.querySelectorAll('img[data-src]');

// перебор массива:
lazyImages.forEach(image => {
  image.addEventListener('load', onImageLoaded, { once: true });
});

// функция добавления анимашек из предыдущего примера:
function onImageLoaded(evt) {
  console.log('Картинка загрузилась');
  evt.target.classList.add('appear');
}

// Вынесем в отдельную функцию (функция 2)
function addLazySizesScript() {
  const script = document.createElement('script');
  script.src =
    'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.2.2/lazysizes.min.js';
  script.integrity =
    'sha512-TmDwFLhg3UA4ZG0Eb4MIyT1O1Mb+Oww5kFG0uHqXsdbyZz9DcvYQhKpGgNkamAI6h2lGGZq2X8ftOJvF/XjTUg==';
  script.crossOrigin = 'anonymous';

  document.body.appendChild(script);
}

// Вынесем в отдельную функцию (функция 1)
function addSrcAttrToLazyImages() {
  const lazyImages = document.querySelectorAll('img[loading="lazy"]');

  lazyImages.forEach(img => {
    img.src = img.dataset.src;
  });
}

// В этом примере мы сделали кросбраузерное решение, которое работает во всех браузерах, но в современных браузерах
// ленивая загрузка грузится из коробки, а в отстающих браузерах подключаем через скрипт библиотеку.